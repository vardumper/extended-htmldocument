#!/usr/bin/env php
<?php

declare(strict_types=1);

use Html\Command\CreateClassCommand;
use Html\Command\CreateEnumCommand;
use Html\Command\CreateJsonCommand;
use Html\Command\WatchCommand;
use Html\Service\ComponentBuilder;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

require __DIR__ . '/../bootstrap.php';

// autoloading
$alreadyLoadedAutoloadFiles = [];
includeCwdVendorAutoloadIfExists($alreadyLoadedAutoloadFiles);
autoloadProjectAutoloaderFile('/../../autoload.php', $alreadyLoadedAutoloadFiles);
includeDependencyOrRepositoryVendorAutoloadIfExists($alreadyLoadedAutoloadFiles);

// generating PHP classes for HTML elements
$app = new Silly\Application('Extended HTMLDocument', '0.2.0 (stable)');
$app->command('make:classes [element] [--specification=]', function ($element, InputInterface $input, OutputInterface $output) {
    return (new CreateClassCommand())($element, $input, $output);
})->descriptions('Creates a new PHP class for all or for a given HTML Element');
$app->command('make:enums [--specification=]', new CreateEnumCommand())->descriptions('Creates backed enums for all HTML attributes with a static set of options');
$app->command('make:json-specs [--specification=]', new CreateJsonCommand())->descriptions('Simply transforms the YAML specs into JSON');
$app->command('make:all [--specification=]', function (InputInterface $input, OutputInterface $output) {
    (new CreateEnumCommand())($input, $output);
    (new CreateClassCommand())(null, $input, $output);
})->descriptions('Creates or re-creates all PHP classes for all HTML Elements and backed enums for static HTML attributes');

// generating Templates (.html,.twig,.php) for HTML elements
$app->command('generate [generator] [source] [dest] [--specification=]', function (InputInterface $input, OutputInterface $output) {
    $output->writeln('Generates templpates. Uses a given generator. Requires a source path with your component YAMLs and a destination path for the generated templates.');
})->descriptions('Generates templates for HTML Elements');

$sourceDefault = realpath(__DIR__ . '/../examples/template-generator/source');
$destDefault = realpath(__DIR__ . '/../examples/template-generator/dest');
$app
    ->command('watch [generator] [source] [dest] [--overwrite-existing=]', function ($generator, $source, $dest, InputInterface $input, OutputInterface $output, $overwriteExisting = false) {
        (new WatchCommand(new ComponentBuilder()))($generator, $source, $dest, $overwriteExisting, $input, $output);
    })
    ->descriptions('Observes a directory or file for changes, and generates templates for HTML Elements', ['generator' => 'name of the generator', 'source' => 'source path', 'dest' => 'destination path'])
    ->defaults(['generator' => 'html', 'source' => $sourceDefault, 'dest' => $destDefault, 'overwrite-existing' => false]);

// $app->setDefaultCommand('make:all');
$app->run();
